# NOTE: This name appears in GitHub's Checks API and in workflow's status badge.
name: ci-renovate

# Trigger the workflow when:
on:
  # When a pull request event occurs for a pull request against one of the
  # matched branches.
  pull_request:
    branches: [master]

jobs:
  add-changelog:
    # NOTE: This name appears in GitHub's Checks API.
    name: add-changelog
    # Trigger job only for dependency update bot.
    # if: github.actor == 'renovate[bot]'
    runs-on: ubuntu-latest
    # Permissions needed to update PR.
    permissions:
      # Enable creating, updating files
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Needed for correct git commit --amend.
          fetch-depth: 0
          # Checkout pull request HEAD commit instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set workflow variables
        # Id is needed to access output in a next step.
        id: vars
        run: |
          echo "FILE_NAME=.changelog/${{ github.event.pull_request.number }}.internal.md" >> $GITHUB_OUTPUT
      - name: Create Change Log file
        run: |
          echo "${{ github.event.pull_request.title }}" > ${{ steps.vars.outputs.FILE_NAME }}
      - name: Commit Change Log file
        run: |
          # Set git user email and name to match author of the last commit.
          git config --local user.email "$(git log --pretty='%ae' -1)"
          git config --local user.name "$(git log --pretty=format:'%an' -1)"
          git add ${{ steps.vars.outputs.FILE_NAME }}
          git commit -m "Append change log fragment"
          # git commit --amend --no-edit
      - name: Push changes back to branch
        run: |
          # git push --force-with-lease origin HEAD:refs/heads/${{ github.head_ref }}
          git push origin HEAD:refs/heads/${{ github.head_ref }}
      - name: Get the new commit hash
        id: commit
        run: |
          echo "::set-output name=commit_hash::$(git rev-parse HEAD)"
      - name: debug
        run: |
          echo github.event.pull_request
      - name: Dispatch pull_request event
        run: |
          # Prepare the custom payload for the pull_request event
          NEW_COMMIT_HASH=$(echo "${{ steps.commit.outputs.commit_hash }}")
          PAYLOAD="{\"commit_hash\": \"$NEW_COMMIT_HASH\"}"

          # Dispatch the pull_request event with the custom payload
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches"

In this updated workflow, we removed the unnecessary fields from the payload and included only the "commit_hash" field in the custom payload. When you dispatch the pull_request event using this payload, it will include the new commit hash in the custom data. The receiving workflow listening for the "pull_request" event will need to extract and use this "commit_hash" information to process the event based on the new commit.


      # - name: Dispatch custom event FooBar
      #   run: |
      #     # Customize the payload as needed
      #     payload='{"event_type": "fooBar"}'
      #     curl -X POST \
      #       -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #       -H "Accept: application/vnd.github+json" \
      #       -d "$payload" \
      #       "https://api.github.com/repos/${{ github.repository }}/dispatches"
