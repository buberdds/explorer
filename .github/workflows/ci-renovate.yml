# NOTE: This name appears in GitHub's Checks API and in workflow's status badge.
name: ci-renovate

# Trigger the workflow when:
on:
  # When a pull request event occurs for a pull request against one of the
  # matched branches.
  pull_request:
    branches: [master]

jobs:
  add-changelog:
    # NOTE: This name appears in GitHub's Checks API.
    name: add-changelog
    # Trigger job only for dependency update bot.
    # if: github.actor == 'renovate[bot]'
    runs-on: ubuntu-latest
    # Permissions needed to update PR.
    permissions:
      # Enable creating, updating files
      contents: write
      # Enable updating commit status
      checks: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Needed for correct git commit --amend.
          fetch-depth: 0
          # Checkout pull request HEAD commit instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set workflow variables
        # Id is needed to access output in a next step.
        id: vars
        run: |
          echo "FILE_NAME=.changelog/${{ github.event.pull_request.number }}.internal.md" >> $GITHUB_OUTPUT
      - name: Check if file exists
        id: check_file
        run: |
          if [ -f ${{ steps.vars.outputs.FILE_NAME }} ]; then
            echo "FILE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "FILE_EXISTS=false" >> $GITHUB_ENV
          fi
      - name: Print FILE_EXISTS variable
        run: |
          echo "FILE_EXISTS: ${{ steps.check_file.outputs.FILE_EXISTS }}"
      - name: Create Change Log file
        if: steps.check_file.outputs.FILE_EXISTS == false
        run: |
          echo "${{ github.event.pull_request.title }}" > ${{ steps.vars.outputs.FILE_NAME }}
      - name: Commit Change Log file
        if: steps.check_file.outputs.FILE_EXISTS == false
        run: |
          # Set git user email and name to match author of the last commit.
          git config --local user.email "$(git log --pretty='%ae' -1)"
          git config --local user.name "$(git log --pretty=format:'%an' -1)"
          git add ${{ steps.vars.outputs.FILE_NAME }}
          git commit --amend --no-edit
      - name: Push changes back to branch
        if: steps.check_file.outputs.FILE_EXISTS == false
        run: |
          git push --force-with-lease origin HEAD:refs/heads/${{ github.head_ref }}
      # - name: Trigger all checks again
      #   if: steps.check_file.outputs.FILE_EXISTS == false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     PR_NUMBER=${{ github.event.pull_request.number }}
      #     API_URL="https://api.github.com/repos/${{ github.repository }}/check-runs"
      #     CHECK_NAME="ci-lint"
      #     curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.antiope-preview+json" -d "{\"name\":\"${CHECK_NAME}\", \"head_sha\":\"${{ github.head_ref }}\"}" $API_URL
      - name: Update or Create Check Run
        if: steps.check_file.outputs.FILE_EXISTS == false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          CHECK_NAME="ci-lint"
          CHECK_TITLE="Lint Check"
          API_URL="https://api.github.com/repos/${{ github.repository }}/check-runs"

          # Get the check runs for this pull request
          CHECK_RUNS=$(curl -X GET -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" $API_URL?head_sha=${{ github.event.pull_request.head.sha }})

          # Find the specific check run for the CHECK_NAME
          CHECK_RUN_ID=$(echo $CHECK_RUNS | jq --arg CHECK_NAME "$CHECK_NAME" '.check_runs[] | select(.name == $CHECK_NAME) | .id')

          # If the check run exists, update it
          if [ -n "$CHECK_RUN_ID" ]; then
            CHECK_PAYLOAD="{\"name\":\"$CHECK_NAME\", \"head_sha\":\"${{ github.event.pull_request.head.sha }}\", \"status\":\"completed\", \"conclusion\":\"success\", \"output\":{\"title\":\"$CHECK_TITLE\", \"summary\":\"Lint check passed.\"}}"
            curl -X PATCH -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" -d "$CHECK_PAYLOAD" "$API_URL/$CHECK_RUN_ID"
          else
            # If the check run doesn't exist, create a new one
            CHECK_PAYLOAD="{\"name\":\"$CHECK_NAME\", \"head_sha\":\"${{ github.event.pull_request.head.sha }}\", \"status\":\"completed\", \"conclusion\":\"success\", \"output\":{\"title\":\"$CHECK_TITLE\", \"summary\":\"Lint check passed.\"}}"
            curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" -d "$CHECK_PAYLOAD" "$API_URL"
          fi
